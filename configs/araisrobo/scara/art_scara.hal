loadusr audio
# load RT modules
loadrt [KINS]KINEMATICS
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD traj_period_nsec=[EMCMOT]TRAJ_PERIOD num_joints=[KINS]JOINTS num_dio=64
loadrt [WOU](WISHBONE) ctrl_type=p,p,p,p bits=[WOU](FPGA) bins=[WOU](RISC) servo_period_ns=[EMCMOT]SERVO_PERIOD alarm_en=[WOU]ALARM_EN pulse_type=[WOU]PULSE_TYPE enc_type=[WOU]ENC_TYPE max_vel_str=[JOINT_0]MAX_VELOCITY,[JOINT_1]MAX_VELOCITY,[JOINT_2]MAX_VELOCITY,[JOINT_3]MAX_VELOCITY max_accel_str=[JOINT_0]MAX_ACCELERATION,[JOINT_1]MAX_ACCELERATION,[JOINT_2]MAX_ACCELERATION,[JOINT_3]MAX_ACCELERATION max_jerk_str=[JOINT_0]MAX_JERK,[JOINT_1]MAX_JERK,[JOINT_2]MAX_JERK,[JOINT_3]MAX_JERK pos_scale_str=[JOINT_0]INPUT_SCALE,[JOINT_1]INPUT_SCALE,[JOINT_2]INPUT_SCALE,[JOINT_3]INPUT_SCALE alr_output=[WOU](ALR_OUTPUT)

# add motion controller functions to servo thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
addf wou.stepgen.update-freq  servo-thread

# link usb command and status
# (MUST add the following lines for USB-MOTION protocol)
net align-cmd wou.align-pos-cmd <=> motion.align-pos-cmd
net usb-cmd wou.usb.cmd <= motion.usb.cmd
net usb-cmd-param0 wou.usb.param-00 <= motion.usb.param-00
net usb-cmd-param1 wou.usb.param-01 <= motion.usb.param-01
net usb-cmd-param2 wou.usb.param-02 <= motion.usb.param-02
net usb-cmd-param3 wou.usb.param-03 <= motion.usb.param-03
net usb-stauts wou.motion.status => motion.wou.status
net motionState motion.motion-state => wou.motion-state
net x-probed joint.0.probed-pos <= wou.stepgen.0.probed-pos
net y-probed joint.1.probed-pos <= wou.stepgen.1.probed-pos
net z-probed joint.2.probed-pos <= wou.stepgen.2.probed-pos
net a-probed joint.3.probed-pos <= wou.stepgen.3.probed-pos

# connect position commands from motion module to step generator
net J0pos wou.stepgen.0.position-cmd <= joint.0.motor-pos-cmd
net J1pos wou.stepgen.1.position-cmd <= joint.1.motor-pos-cmd
net J2pos wou.stepgen.2.position-cmd <= joint.2.motor-pos-cmd
net J3pos wou.stepgen.3.position-cmd <= joint.3.motor-pos-cmd

# loop position commands back to motion module feedback
# for OPEN-loop system:
net J0pos => joint.0.motor-pos-fb
net J1pos => joint.1.motor-pos-fb
net J2pos => joint.2.motor-pos-fb
net J3pos => joint.3.motor-pos-fb

# home_switch positions
net J0_switch-pos wou.stepgen.0.switch-pos => joint.0.switch-pos
net J1_switch-pos wou.stepgen.1.switch-pos => joint.1.switch-pos
net J2_switch-pos wou.stepgen.2.switch-pos => joint.2.switch-pos
net J3_switch-pos wou.stepgen.3.switch-pos => joint.3.switch-pos

# motor_index positions
net J0_index-pos wou.stepgen.0.index-pos => joint.0.index-pos
net J1_index-pos wou.stepgen.1.index-pos => joint.1.index-pos
net J2_index-pos wou.stepgen.2.index-pos => joint.2.index-pos
net J3_index-pos wou.stepgen.3.index-pos => joint.3.index-pos

# estop loopback
net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in
# net estop-loop  iocontrol.0.emc-enable-in <=  wou.gpio.in.00
#to CL: # estop loopback
#to CL: net alarm => not.0.in
#to CL: #net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in
#to CL: net estop-loop iocontrol.0.emc-enable-in <= not.0.out

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change iocontrol.0.tool-changed

# connect sync in signal
# net sync_in_trigger      motion.sync-in-trigger =>  wou.sync.in.trigger
# net sync_in_index        motion.sync-in-index   =>  wou.sync.in.index
# net sync_in_wait_type    motion.sync-in-wait-type =>  wou.sync.in.wait_type
# net sync_in_timeout      motion.sync-in-timeout => wou.sync.in.timeout



# amp control
net xena joint.0.amp-enable-out => wou.stepgen.0.enable
net yena joint.1.amp-enable-out => wou.stepgen.1.enable
net zena joint.2.amp-enable-out => wou.stepgen.2.enable
net aena joint.3.amp-enable-out => wou.stepgen.3.enable


setp wou.stepgen.0.steplen  [JOINT_0]STEPLEN
setp wou.stepgen.1.steplen  [JOINT_1]STEPLEN
setp wou.stepgen.2.steplen  [JOINT_2]STEPLEN
setp wou.stepgen.3.steplen  [JOINT_3]STEPLEN

setp wou.rt.abort  0

# connect signals from FPGA.
# pulse_pos: the actual pulse sent to servo drive.
net pulse_cmd_j0  <= wou.stepgen.0.pulse_pos
net pulse_cmd_j1  <= wou.stepgen.1.pulse_pos
net pulse_cmd_j2  <= wou.stepgen.2.pulse_pos
net pulse_cmd_j3  <= wou.stepgen.3.pulse_pos
# enc_pos: the encoder position read from FPGA.

net enc_pos_j0 <=  wou.stepgen.0.enc_pos  
net enc_pos_j1 <=  wou.stepgen.1.enc_pos  
net enc_pos_j2 <=  wou.stepgen.2.enc_pos  
net enc_pos_j3 <=  wou.stepgen.3.enc_pos  

# pass vel status and req_status to FPGA

# obsolete: net current_vel motion.current-vel => wou.current-vel
# obsolete: net requested_vel motion.requested-vel => wou.requested-vel


net sync_in_trigger      =>  wou.sync.in.trigger
net sync_in_index        =>  wou.sync.in.index
net sync_in_wait_type    =>  wou.sync.in.wait_type
net sync_in_timeout  => wou.sync.in.timeout

# to CL: net alarm         <=  wou.gpio.in.00
# to CL: net alarm         =>  joint.0.amp-fault-in
# to CL: net alarm         =>  joint.1.amp-fault-in
# to CL: net alarm         =>  joint.2.amp-fault-in
# to CL: net alarm         =>  joint.3.amp-fault-in
# net servo_ready   <=  wou.gpio.in.01
# TODO: forward servo_ready to AXIS, the servo could not be ON while (!servo_ready)
# switches.hal, simulated_home.hal: definition for home_j0 ~ home_j3

# set wou module scaling - get values from ini file
setp wou.stepgen.0.position-scale [JOINT_0]INPUT_SCALE
setp wou.stepgen.1.position-scale [JOINT_1]INPUT_SCALE
setp wou.stepgen.2.position-scale [JOINT_2]INPUT_SCALE
setp wou.stepgen.3.position-scale [JOINT_3]INPUT_SCALE

# set wou module velocity limits - get values from ini file
setp wou.stepgen.0.maxvel [JOINT_0]MAX_VELOCITY
setp wou.stepgen.1.maxvel [JOINT_1]MAX_VELOCITY
setp wou.stepgen.2.maxvel [JOINT_2]MAX_VELOCITY
setp wou.stepgen.3.maxvel [JOINT_3]MAX_VELOCITY

# set wou module accel limits - get values from ini file
setp wou.stepgen.0.maxaccel [JOINT_0]MAX_ACCELERATION
setp wou.stepgen.1.maxaccel [JOINT_1]MAX_ACCELERATION
setp wou.stepgen.2.maxaccel [JOINT_2]MAX_ACCELERATION
setp wou.stepgen.3.maxaccel [JOINT_3]MAX_ACCELERATION

# for art_scarakins.c
setp scarakins.D1     [SCARAKINS]D1
setp scarakins.D2     [SCARAKINS]D2
setp scarakins.D3     [SCARAKINS]D3
setp scarakins.D4     [SCARAKINS]D4
setp scarakins.D5     [SCARAKINS]D5
setp scarakins.D6     [SCARAKINS]D6
setp scarakins.PPD    [SCARAKINS]PPD
setp scarakins.SING   [SCARAKINS]SING

# for src/hal/user_comps/vismach/art_scaragui.py 
loadusr -W art_scaragui
net j0 joint.0.pos-fb art_scaragui.joint0
net j1 joint.1.pos-fb art_scaragui.joint1
net j2 joint.2.pos-fb art_scaragui.joint2
net j3 joint.3.pos-fb art_scaragui.joint3
setp art_scaragui.D1        [SCARAKINS]D1
setp art_scaragui.D2        [SCARAKINS]D2
setp art_scaragui.D3        [SCARAKINS]D3
setp art_scaragui.D4        [SCARAKINS]D4
setp art_scaragui.D5        [SCARAKINS]D5
setp art_scaragui.D6        [SCARAKINS]D6
setp art_scaragui.J3MIN     [JOINT_2]MIN_LIMIT
setp art_scaragui.J3MAX     [JOINT_2]MAX_LIMIT
setp art_scaragui.PPD       [SCARAKINS]PPD

# net X_ferror   wou.stepgen.0.pid.error => joint.0.usb-ferror
# net Y_ferror  wou.stepgen.1.pid.error => joint.1.usb-ferror
# net Z_ferror   wou.stepgen.2.pid.error => joint.2.usb-ferror
# net A_ferror  wou.stepgen.3.pid.error => joint.3.usb-ferror

# net X_ferror   wou.stepgen.0.pid.error 
# net Y_ferror   wou.stepgen.1.pid.error 
# net Z_ferror   wou.stepgen.2.pid.error 
# net A_ferror   wou.stepgen.3.pid.error 
# 
# net X_ferror_flag   wou.stepgen.0.ferror-flag => joint.0.usb-ferror-flag
# net Y_ferror_flag   wou.stepgen.1.ferror-flag => joint.1.usb-ferror-flag
# net Z_ferror_flag   wou.stepgen.2.ferror-flag => joint.2.usb-ferror-flag
# net A_ferror_flag   wou.stepgen.3.ferror-flag => joint.3.usb-ferror-flag
# 
