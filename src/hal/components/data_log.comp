component data_log;
option userspace;
pin in bit enable;
pin in s32 data-s32-#[16];
pin in float data-float-#[16];
pin in bit data-gpio-#[16];
param rw s32 print_format-#[48]=0;
variable int s32_num;
variable int float_num;
variable int gpio_num;
license "GPL";
;;
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
// s = s32, f = float, b = gpio
const char  *print_format[16] = { "fffffffb",
                                  "fffffffb",
                                  "fffffffb",
                                  "fffffffb",
                                  "fffffffb",
                                  "fffffffb",
                                  "fffffffb",
                                  "fffffffb",
                                  "fffffffb",
                                  "fffffffb",
                                  "fffffffb",
                                  "fffffffb",
                                  "fffffffb",
                                  "fffffffb",
                                  "fffffffb",
                                  "fffffffb"};


void user_mainloop(void) {
    int32_t timeout, i, j, s_index, f_index, b_index, str_len, prev_enable[16]; 
    char str[256];
    char *c;
    FILE *hfile[16];
    i=0;
    FOR_ALL_INSTS() {
      s32_num = 16;
      float_num = 16;
      gpio_num  = 16;
      sprintf(str, "data_log_%01d.cvs",i);
      hfile[i] = fopen(str, "w");
      i++;
    }
    timeout=100000;
    while(1){
        usleep(timeout);
        i = 0;
        FOR_ALL_INSTS() {
            if (enable) {
                if(prev_enable[i]==0) {
                    sprintf(str, "data_log_%01d.cvs",i);
                    hfile[i] = fopen(str, "w");
                    fprintf(stderr,"open file\n");
                }
                s_index = 0;
                f_index = 0;
                b_index = 0;

                c = (char*)print_format[i];
                str_len=strlen(print_format[i]);
                for(j=0; j<str_len; j++) {
                    switch(*c) {
                    case 's':
                    case 'S':
                      if(s_index < s32_num) { 
                          fprintf(hfile[i],"%d ", data_s32(s_index));
                          s_index++;
                      }
                      break;
                    case 'f':
                    case 'F':
                      if (f_index < float_num) {
                          fprintf(hfile[i], "%.7f ", data_float(f_index));
                          f_index++;
                      }
                      break;
                    case 'b':
                    case 'B':
                      if (b_index < gpio_num) {
                          fprintf(hfile[i], "%1d ", data_gpio(b_index));
                          b_index++;
                      }
                      break;
                    }
                    if(j+1<str_len) {
                        fprintf(hfile[i],",");
                    } else {
                        fprintf(hfile[i],"\r\n");
                    }
                    c++;
                }
                fprintf(hfile[i], "\n");
                fflush(hfile[i]);
                prev_enable[i] = 1;
            } else {
                if(prev_enable[i] == 1) {
                    fclose(hfile[i]);
                    fprintf(stderr,"close file\n");
                }
              prev_enable[i] = 0; 

            }
            i++;

        }

    }
}
// vim:sw=4:sts=4:et:
