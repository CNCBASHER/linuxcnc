component data_log;
option userspace;
pin in bit enable;
pin in s32 data-s32-#[16];
pin in float data-float-#[16];
pin in bit data-gpio-#[16];
param rw bit prev-gpio-#[16];
param rw s32 print-format-#[48]=0;
param rw s32 timeout;
variable int s32_num;
variable int float_num;
variable int gpio_num;
variable int print_len;
variable int log_count;
license "GPL";
;;
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <time.h>
#include <sys/time.h>

void user_mainloop(void) {
    int32_t i, j, s_index, f_index, b_index, str_len, prev_enable[16], n; 
    char str[256];
    char *line;
    struct tm *tmp;
    time_t t;
    FILE *hfile[16], *log_name;
    struct timeval start, last;
    long seconds, useconds;
    double mtime;
    i=0;
    FOR_ALL_INSTS() {
      s32_num = 16;
      float_num = 16;
      gpio_num  = 16;
      log_count = 0;
      sprintf(str, "data_log_%01d_%02d.csv",i, log_count);
      hfile[i] = fopen(str, "w");
      i++;
    }
    while(1){
        i = 0;
        FOR_ALL_INSTS() {
            if (i==0) {
                usleep(timeout*1000);
            }
            if (enable) {
                if(prev_enable[i]==0) {
                    log_name = fopen("/tmp/data_log.tmp", "r");

                    if (log_name != NULL) {
                        getdelim(&line, &n, '.', log_name);
                        sprintf(str, "%scsv", line);
                        fprintf(stderr,"file name: %s\n", str);
                    } else { // use default file name
                        sprintf(str, "data_log_%01d_%02d.csv", i, log_count);
                    }
                    fclose(log_name);
                    log_name = NULL;
                    
                    log_count+=1;
                    hfile[i] = fopen(str, "w");
                    
                    gettimeofday(&start, NULL);
                }
                s_index = 0;
                f_index = 0;
                b_index = 0;
                print_len = 0;
                while(print_format(print_len)) print_len += 1;
                if(print_len>0) {
                    gettimeofday(&last, NULL);
                    seconds  = last.tv_sec  - start.tv_sec;
                    useconds = last.tv_usec - start.tv_usec;
                    mtime = (double) ((seconds) + useconds*0.000001);
                    fprintf(hfile[i], "%5.3f ", mtime);
                }
                for(j=0; j<print_len; j++) {
                    
                    switch(print_format(j)) {
                    case 1:
                      if(s_index < s32_num) { 
                          fprintf(hfile[i],"%d ", data_s32(s_index));
                          s_index++;
                      }
                      break;
                    case 2:
                      if (f_index < float_num) {
                          fprintf(hfile[i], "%.7f ", data_float(f_index));
                          f_index++;
                      }
                      break;
                    case 3:
                      if (b_index < gpio_num) {
                          fprintf(hfile[i], "%1d ", data_gpio(b_index));
                          prev_gpio(b_index) = data_gpio(b_index);
                          b_index++;
                      }
                      break;
                    case 4: // for io toggle
                      if (b_index < gpio_num) {
                          if (prev_gpio(b_index) != data_gpio(b_index)) {
                              t = time(NULL);
                              tmp = localtime(&t);
                              strftime(str, sizeof(str), "%Y/%m/%d %H:%M:%S",tmp);
                              fprintf(hfile[i], "%s", str);     
                              fprintf(stderr, "%s\n", str);
                          } else {
                              fprintf(hfile[i], "0");
                          }
                          prev_gpio(b_index) = data_gpio(b_index);
                      }
                    }
                    if(j+1<print_len) {
                        fprintf(hfile[i],",");
                    } else {
                        if(print_len > 0) {
                            fprintf(hfile[i],"\r\n");
                        }
                    }
                }
                fflush(hfile[i]);
                prev_enable[i] = 1;
            } else {
                if(prev_enable[i] == 1) {
                    fclose(hfile[i]);
                }
              prev_enable[i] = 0; 

            }
            i++;

        }

    }
}
// vim:sw=4:sts=4:et:
