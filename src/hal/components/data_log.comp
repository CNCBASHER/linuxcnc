component data_log;
option userspace;
// pin in bit enable-s32-#[16:personality&0x0000000f];
// pin in bit enable-float-#[16:(personality&0x000000f0)/16];
// pin in bit enable-gpio-#[16:(personality&0x00000f00)/256];
pin in bit enable;
pin in s32 data-s32-#[16:(personality&0x0000000f)];
pin in float data-float-#[16:(personality&0x000000f0)/16];
pin in bit gpio-#[16:(personality&0x00000f00)/256];
variable int s32_num;
variable int float_num;
variable int gpio_num;
license "GPL";
;;
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>



// s = s32, f = float, b = gpio
static char *print_format[16] =
    { "sfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfb",
      "sfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfb",
      "sfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfb",
      "sfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfb",
      "sfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfb",
      "sfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfb",
      "sfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfb",
      "sfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfb",
      "sfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfb",
      "sfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfb",
      "sfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfb",
      "sfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfb",
      "sfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfb",
      "sfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfb",
      "sfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfb",
      "sfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfbsfb"};

RTAPI_MP_ARRAY_STRING(print_format, 16,
                      "Print format of data log");

void user_mainloop(void) {
    int32_t timeout, i, j, s_index, f_index, b_index, str_len; 
    char str[256];
    char *c;
    FILE *hfile[16];
    i=0;
    FOR_ALL_INSTS() {
      s32_num = personality&0x0000000f;
      float_num = personality&0x000000f0 >> 4;
      gpio_num  = personality&0x00000f00 >> 8;
      sprintf(str, "data_log_%01d.cvs",i);
      hfile[i] = fopen(str, "w");
      i++;
    }

    timeout = ((personality & 0xffff0000) >> 16) * 1000; 
    while(1){
        usleep(timeout);
        i = 0;
        FOR_ALL_INSTS() {
            if (enable) { 
                s_index = 0;
                f_index = 0;
                b_index = 0;

                c = print_format[i];
                str_len=strlen(print_format[i]);
                for(j=0; j<str_len; j++) {
                  switch(*c) {
                  case 's':
                  case 'S':
                    if(s_index < s32_num) { 
                        fprintf(hfile[i],"%15d, ", data_s32(s_index));
                        s_index++;
                    }
                  break;
                  case 'f':
                  case 'F':
                    if (f_index < float_num) {
                        fprintf(hfile[i], "%15.7f, ", data_float(f_index));
                        f_index++;
                    }
                  break;
                  case 'b':
                  case 'B':
                    if (b_index < gpio_num) {
                        fprintf(hfile[i], "%1d, ", data_gpio(b_index));
                        b_index++;
                    }
                  break;
                  }
                  c++;

              }
          }
          fflush(hfile[i]);   
          i++;
        }
    }
}
// vim:sw=4:sts=4:et:
