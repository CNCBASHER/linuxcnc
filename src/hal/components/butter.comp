component butter "Butterworth filter";
pin in float in;
pin out float out;
param rw float c#[3];
param rw float d#[3];
param rw float output_gain;
variable double output_buff[3];
variable double input_buff[3];
variable double s1;
variable double s2;
variable int input_index = 0;
variable int output_index = 0;
license "GPL";
function _;
;;

#define C_LENGTH 3
#define D_LENGTH 3
FUNCTION(_) {
    int i;
    input_index = (input_index + 1) % D_LENGTH;
    output_index = (output_index + 1) % C_LENGTH;
    input_buff[input_index] = in;
    s1 = 0;
    for (i=1; i<D_LENGTH; i++) {
      s1 += c(i) * output_buff[(output_index+C_LENGTH-i) % (C_LENGTH)];
    }
    s2 = 0;
    for (i=0; i<C_LENGTH; i++) {
      s2 += d(i) * input_buff[(input_index+D_LENGTH-i) % (D_LENGTH)];
    }
    output_buff[output_index] = s2-s1;
    out = output_buff[output_index] * output_gain;
}
