#!/usr/bin/python
"""Usage:
    python teach.py outputfile nmlfile
If outputfile is not specified, writes to standard output.

You must ". scripts/emc-environment" before running this script, if you use
run-in-place.
"""
#    Copyright 2007 Jeff Epler <jepler@unpythonic.net>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import emc
import Tkinter 
import sys
import os
import tkMessageBox
from Tkinter import *


linenumber = 1;

if len(sys.argv) > 2:
    emc.nmlfile = sys.argv[1]

if len(sys.argv) > 1:
    outfile = sys.argv[1]
    sys.stdout = open(outfile, 'w')
#else:
#    sys.stdout = open('../Teached.ngc', 'w')

#
#  Output relative config ngc file header for SRX611
#

file_header = "\
(Generated by Arais Robot Technology: EMC2 teach-in 2010)\n\
\n\
#1000 = 0.0000  ( X Shift )\n\
#1001 = 0.0000  ( Y Shift )\n\
#1002 = 0.0000  ( Z Shift )\n\
#1003 = 0.0000  ( A Shift )\n\
\n\n\
"
feed_rate_string = ""

output_string = "(Learned Path)\n\
"

s = emc.stat()

def save_quit():
    if tkMessageBox.askokcancel("Quit", "You want to quit now?"):
        app.destroy()
    return
def get_textbox_data():
    global file_header
    global feed_rate_string
    global output_string
    file_header = text.get(0.0, 9.0)
#    print file_header
    feed_rate_string = text.get(9.0,"13.0")
    print feed_rate_string
    output_string = text.get(13.0,END)
    entry1.delete(0, END)
    entry1.insert(0, text.get("9.8","9.end"))
    entry2.delete(0, END)
    entry2.insert(0, text.get("10.8","10.end"))
    entry3.delete(0, END)
    entry3.insert(0, text.get("11.8","11.end"))
    button4.config(state=DISABLED)
    return

def textbox_changed(event):
# disable apply button
    button4.config(state=NORMAL)
    return

def feedrate_press(event):
    update_feed_string()
    return

def update_textbox():
    global file_header
    global feed_rate_string
    global output_string
    text.delete(0.0,END)
    text.insert(INSERT, file_header)
    text.insert(INSERT, feed_rate_string)
    text.insert(INSERT, output_string)
    return

def update_feed_string():
    global file_header
    global feed_rate_string
    global output_string
    feed_rate_string = "#3000 = " + entry1.get() +"\n"
    feed_rate_string = feed_rate_string+"#3001 = " + entry2.get() +"\n"
    feed_rate_string = feed_rate_string+"#3002 = " + entry3.get() +"\n\n"
    update_textbox()
    return

def get_cart():
    s.poll()
    position = " ".join(["%-.4f"] * s.axes)
    return position % s.position[:s.axes]
    
def get_joint():
    s.poll()
    position = " ".join(["%-.4f"] * s.axes)
    return position % s.joint_actual_position[:s.axes]

def log():
    global output_string
    p = get_cart()
#    p = "X:"+p.split(' ')[0]+" Y:"+p.split(' ')[1]+" Z:"+p.split(' ')[2]+" A:"+p.split(' ')[3]
#    label1.configure(text='%s' % p)
    #print "G1X["+p.split(' ')[0]+"+#1000]Y["+p.split(' ')[1]+ "+#1001]Z[" + p.split(' ')[2] +"+#1002]A["+ p.split(' ')[3]+"+#1003]"
    output_string = output_string +  "G1X["+p.split(' ')[0]+"+#1000]Y["+p.split(' ')[1]+ "+#1001]Z[" + p.split(' ')[2] +"+#1002]A["+ p.split(' ')[3]+"+#1003]\n"
    update_textbox()
    
def ins_feed_3000():
    global output_string
    output_string = output_string +"F#3000\n"
    update_textbox()
    return    
    
def ins_feed_3001():
    global output_string
    output_string = output_string +"F#3001\n"
    update_textbox()
    return    
  
def ins_feed_3002():
    global output_string
    output_string = output_string +"F#3002\n"
    update_textbox()
    return      
    
def show():
    s.poll()
    #if world.get():
    p = get_cart()
    p = "X:["+p.split(' ')[0]+"] Y:["+p.split(' ')[1]+"] Z:["+p.split(' ')[2]+"] A:["+p.split(' ')[3]+"]"
    #else:
    #    p = get_joint()
#        p = "J0:["+p.split(' ')[0]+"] J1:["+p.split(' ')[1]+"] J2:["+p.split(' ')[2]+"] J3:["+p.split(' ')[3]+"]"
    label2.configure(text='%s' % p)
#    labXval.configure(text='%s' % p.split(' ')[0])
#    labYval.configure(text='%s' % p.split(' ')[1])
#    labZval.configure(text='%s' % p.split(' ')[2])
#    labAval.configure(text='%s' % p.split(' ')[3])
    app.after(100, show)

det = 0
def destory_bind(x):
    global det
    global file_header
    global feed_rate_string
    global output_string
    if det == 0:   
         #print "M2"
        output_string = file_header+feed_rate_string+output_string + "M2\n"
        print output_string
    det = 1
    

app = Tkinter.Tk(); app.wm_title('EMC2 Teach-In')
app.bind('<Destroy>',destory_bind)
app.protocol("WM_DELETE_WINDOW", save_quit)

world = Tkinter.IntVar(app)

button = Tkinter.Button(app, command=log, text='Learn', font=("helvetica", 14))
button.grid(row=0, sticky= W+E)


label2 = Tkinter.Label(app, width=40, font='fixed', anchor="w")
label2.config(relief= SUNKEN)
label2.grid(row=0,column=1, ipadx=2, ipady=2, columnspan = 7, sticky= W+E)


entry1 = Tkinter.Entry(app, font='fixed',width=10)
entry1.grid(row=40,column=1, sticky= N+S)
entry1.delete(0, END)
entry1.insert(0, "2000")
entry1.bind('<Return>', feedrate_press)


entry2 = Tkinter.Entry(app,font='fixed',width=10)
entry2.grid(row=40,column=3, sticky= N+S)
entry2.delete(0, END)
entry2.insert(0, "2000")
entry2.bind('<Return>', feedrate_press)


entry3 = Tkinter.Entry(app, font='fixed',width=10)
entry3.grid(row=40,column=5, sticky= N+S)
entry3.delete(0, END)
entry3.insert(0, "2000")
entry3.bind('<Return>', feedrate_press)

button1 = Tkinter.Button(app, command=ins_feed_3000, text='Insert F#3000', font=("helvetica", 14))
button1.grid(row=40, rowspan=1)
button2 = Tkinter.Button(app, command=ins_feed_3001, text='Insert F#3001', font=("helvetica", 14))
button2.grid(row=40, column=2, rowspan=1)
button3 = Tkinter.Button(app, command=ins_feed_3002, text='Insert F#3002', font=("helvetica", 14))
button3.grid(row=40, column=4, rowspan=1)
button4 = Tkinter.Button(app, command=get_textbox_data, text='Apply', font=("helvetica", 14))
button4.grid(row=52, column=5, sticky= S+W+E)
button4.config(state=DISABLED)

button5 = Tkinter.Button(app, command=save_quit, text='Save Path', font=("helvetica", 14))
button5.grid(row=53, column=5, sticky= S+W+E)



text = Tkinter.Text(app)
 
text.grid(row=44,column=0,rowspan=10, columnspan=5, sticky = W+E)
update_feed_string()
update_textbox()
text.bind('<Button-1>', textbox_changed)


show()
app.mainloop()

